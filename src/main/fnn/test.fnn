@type Maybe a = Just a | Nothing;
@type Either a b = Left a | Right b;
@type Identity a = MkId a;
@type Strange a b c= MkStrange1 a b | MkStrange2 c;
@type Bool = False | True;
@type Pair a b = MkPair a b;

@type swap = Pair (Either Bool a) b -> Pair b (Either Bool a);
swap = @learn;

@type main = Pair (Either Bool Bool) (Maybe Bool) -> Pair (Maybe Bool) (Either Bool Bool);
main = swap;

test (Just False) = True;
test (Just True) = test (Just False);
test Nothing = False;

@type test_learn = Maybe Bool -> Bool;
test_learn (Just False) = @learn True;
test_learn (Just True) = test_learn (@learn False);
test_learn Nothing = @learn False;

if True x y = x;
if False x y = y;

not True = False;
not False = True;

test2 = @rec f @in \x. not (f (if x False True));